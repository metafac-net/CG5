#region Notices
// <auto-generated>
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
// </auto-generated>
// <information>
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
// Generator: Contracts.3.2
// Metadata : MetaFac.CG5.Expressions.Schema
// </information>
#endregion
#nullable enable
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable CS8019 // Unnecessary using directive
using MetaFac.CG4.Runtime;
using MetaFac.Memory;
using MetaFac.Mutability;
using System;
using System.Collections.Generic;
using System.Numerics;

namespace MetaFac.CG5.Expressions
{
    public enum UnaryOperator
    {
        None = 0,
        Plus = 1,
        Minus = 2,
        LogicalNot = 3,
        BitwiseNot = 4,
    }
    public enum BinaryOperator
    {
        None = 0,
        Pow = 1,
        Add = 2,
        Sub = 3,
        Mul = 4,
        Div = 5,
        Mod = 6,
        LSS = 7,
        LEQ = 8,
        GTR = 9,
        GEQ = 10,
        EQU = 11,
        NEQ = 12,
        Assign = 13,
        AND = 14,
        OR = 15,
    }
    public enum TertiaryOperator
    {
        None = 0,
        IfThenElse = 1,
    }
    public partial interface INode : IEntityBase
    {
    }
    public partial interface IErrorNode : INode
    {
        String? Message { get; }
    }
    public partial interface IConstantNode : INode
    {
    }
    public partial interface INullConstantNode : IConstantNode
    {
    }
    public partial interface IBooleanConstantNode : IConstantNode
    {
        Boolean Value { get; }
    }
    public partial interface IStringConstantNode : IConstantNode
    {
        String? Value { get; }
    }
    public partial interface INumericConstantNode : IConstantNode
    {
    }
    public partial interface IIntegerConstantNode : INumericConstantNode
    {
        Int64 Value { get; }
    }
    public partial interface IDoubleConstantNode : INumericConstantNode
    {
        Double Value { get; }
    }
    public partial interface IVariableNode : INode
    {
        String? Name { get; }
    }
    public partial interface IOperatorNode : IConstantNode
    {
    }
    public partial interface IBinaryOperatorNode : IOperatorNode
    {
        BinaryOperator Value { get; }
    }
    public partial interface IUnaryExpressionNode : INode
    {
        UnaryOperator Op { get; }
        INode? Operand { get; }
    }
    public partial interface IBinaryExpressionNode : INode
    {
        BinaryOperator Op { get; }
        INode? Left { get; }
        INode? Right { get; }
    }
    public partial interface ITertiaryExpressionNode : INode
    {
        TertiaryOperator Op { get; }
        INode? Node1 { get; }
        INode? Node2 { get; }
        INode? Node3 { get; }
    }
}
